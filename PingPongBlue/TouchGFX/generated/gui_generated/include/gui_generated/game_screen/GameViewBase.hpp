/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef GAMEVIEWBASE_HPP
#define GAMEVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/game_screen/GamePresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565Bitmap.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/containers/ModalWindow.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/progress_indicators/ImageProgress.hpp>
#include <touchgfx/containers/clock/DigitalClock.hpp>
#include <touchgfx/widgets/TextArea.hpp>

class GameViewBase : public touchgfx::View<GamePresenter>
{
public:
    GameViewBase();
    virtual ~GameViewBase();
    virtual void setupScreen();
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void tickEvent()
    {
        // Override and implement this function in Game
    }
    virtual void handlePlayButton()
    {
        // Override and implement this function in Game
    }
    virtual void handlePauseButton()
    {
        // Override and implement this function in Game
    }
    virtual void handleReplayButton()
    {
        // Override and implement this function in Game
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScalableImage backGround;
    touchgfx::BoxWithBorder blueBox;
    touchgfx::BoxWithBorder redBox;
    touchgfx::Circle ball;
    touchgfx::PainterRGB565Bitmap ballPainter;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  pauseButton;
    touchgfx::ModalWindow pauseModal;
    touchgfx::TextAreaWithOneWildcard blueText;
    touchgfx::TextAreaWithOneWildcard redText;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  replayButton;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  backButton;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  playButton;
    touchgfx::ImageProgress timeBar;
    touchgfx::DigitalClock timeClock;
    touchgfx::TextArea blueWin;
    touchgfx::TextArea redWin;

    /*
     * Wildcard Buffers
     */
    static const uint16_t BLUETEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar blueTextBuffer[BLUETEXT_SIZE];
    static const uint16_t REDTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar redTextBuffer[REDTEXT_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 4800;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<GameViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // GAMEVIEWBASE_HPP
