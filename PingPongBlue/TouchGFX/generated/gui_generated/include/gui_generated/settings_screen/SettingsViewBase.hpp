/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SETTINGSVIEWBASE_HPP
#define SETTINGSVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/settings_screen/SettingsPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>

class SettingsViewBase : public touchgfx::View<SettingsPresenter>
{
public:
    SettingsViewBase();
    virtual ~SettingsViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void ballSpeedIncreaseFunction()
    {
        // Override and implement this function in Settings
    }
    virtual void ballSpeedDecreaseFunction()
    {
        // Override and implement this function in Settings
    }
    virtual void boardSpeedIncreaseFunction()
    {
        // Override and implement this function in Settings
    }
    virtual void boardSpeedDecreaseFunction()
    {
        // Override and implement this function in Settings
    }
    virtual void scoreLimitIncreaseFunction()
    {
        // Override and implement this function in Settings
    }
    virtual void scoreLimitDecreaseFunction()
    {
        // Override and implement this function in Settings
    }
    virtual void playButtonHandleFunction()
    {
        // Override and implement this function in Settings
    }
    virtual void resetButtonHandleFuction()
    {
        // Override and implement this function in Settings
    }
    virtual void saveButtonHandleFunction()
    {
        // Override and implement this function in Settings
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScalableImage backGround;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  saveButton;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  resetButton;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  playButton;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  backButton;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  scoreLimitDecrease;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  scoreLimitIncrease;
    touchgfx::TextAreaWithOneWildcard scoreLimitValue;
    touchgfx::TextArea scoreLimitText;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  boardSpeedDecrease;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  boardSpeedIncrease;
    touchgfx::TextAreaWithOneWildcard boardSpeedValue;
    touchgfx::TextArea boardSpeedText;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  ballSpeedDecrease;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  ballSpeedIncrease;
    touchgfx::TextAreaWithOneWildcard ballSpeedValue;
    touchgfx::TextArea ballSpeedText;

    /*
     * Wildcard Buffers
     */
    static const uint16_t SCORELIMITVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar scoreLimitValueBuffer[SCORELIMITVALUE_SIZE];
    static const uint16_t BOARDSPEEDVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar boardSpeedValueBuffer[BOARDSPEEDVALUE_SIZE];
    static const uint16_t BALLSPEEDVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar ballSpeedValueBuffer[BALLSPEEDVALUE_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<SettingsViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // SETTINGSVIEWBASE_HPP
