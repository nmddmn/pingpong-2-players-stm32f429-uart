/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/settings_screen/SettingsViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

SettingsViewBase::SettingsViewBase() :
    flexButtonCallback(this, &SettingsViewBase::flexButtonCallbackHandler)
{
    __background.setPosition(0, 0, 320, 240);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    backGround.setBitmap(touchgfx::Bitmap(BITMAP_GLASS_THEME_IMAGES_BACKGROUNDS_480X272_TRIANGULAR_DISCO_ID));
    backGround.setPosition(0, 0, 320, 240);
    backGround.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(backGround);

    saveButton.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_SAVE_ALT_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_SAVE_ALT_50_50_E8F6FB_SVG_ID));
    saveButton.setIconXY(0, 0);
    saveButton.setAction(flexButtonCallback);
    saveButton.setPosition(270, 190, 50, 50);
    add(saveButton);

    resetButton.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_RESTORE_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_RESTORE_50_50_E8F6FB_SVG_ID));
    resetButton.setIconXY(0, 0);
    resetButton.setAction(flexButtonCallback);
    resetButton.setPosition(0, 190, 50, 50);
    add(resetButton);

    playButton.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_AV_PLAY_ARROW_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_AV_PLAY_ARROW_50_50_E8F6FB_SVG_ID));
    playButton.setIconXY(0, 0);
    playButton.setAction(flexButtonCallback);
    playButton.setPosition(270, 0, 50, 50);
    add(playButton);

    backButton.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_E8F6FB_SVG_ID));
    backButton.setIconXY(0, 0);
    backButton.setAction(flexButtonCallback);
    backButton.setPosition(0, 0, 50, 50);
    add(backButton);

    scoreLimitDecrease.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_REMOVE_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_REMOVE_50_50_E8F6FB_SVG_ID));
    scoreLimitDecrease.setIconXY(0, 0);
    scoreLimitDecrease.setAction(flexButtonCallback);
    scoreLimitDecrease.setPosition(72, 180, 50, 50);
    add(scoreLimitDecrease);

    scoreLimitIncrease.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_ADD_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_ADD_50_50_E8F6FB_SVG_ID));
    scoreLimitIncrease.setIconXY(0, 0);
    scoreLimitIncrease.setAction(flexButtonCallback);
    scoreLimitIncrease.setPosition(198, 180, 50, 50);
    add(scoreLimitIncrease);

    scoreLimitValue.setXY(135, 180);
    scoreLimitValue.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    scoreLimitValue.setLinespacing(0);
    Unicode::snprintf(scoreLimitValueBuffer, SCORELIMITVALUE_SIZE, "%s", touchgfx::TypedText(T_SCORELIMITDEFAULT).getText());
    scoreLimitValue.setWildcard(scoreLimitValueBuffer);
    scoreLimitValue.resizeToCurrentText();
    scoreLimitValue.setTypedText(touchgfx::TypedText(T_SCORELIMIT));
    add(scoreLimitValue);

    scoreLimitText.setXY(104, 156);
    scoreLimitText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    scoreLimitText.setLinespacing(0);
    scoreLimitText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IYC3));
    add(scoreLimitText);

    boardSpeedDecrease.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_REMOVE_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_REMOVE_50_50_E8F6FB_SVG_ID));
    boardSpeedDecrease.setIconXY(0, 0);
    boardSpeedDecrease.setAction(flexButtonCallback);
    boardSpeedDecrease.setPosition(72, 102, 50, 50);
    add(boardSpeedDecrease);

    boardSpeedIncrease.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_ADD_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_ADD_50_50_E8F6FB_SVG_ID));
    boardSpeedIncrease.setIconXY(0, 0);
    boardSpeedIncrease.setAction(flexButtonCallback);
    boardSpeedIncrease.setPosition(198, 102, 50, 50);
    add(boardSpeedIncrease);

    boardSpeedValue.setXY(148, 102);
    boardSpeedValue.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    boardSpeedValue.setLinespacing(0);
    Unicode::snprintf(boardSpeedValueBuffer, BOARDSPEEDVALUE_SIZE, "%s", touchgfx::TypedText(T_BOARDSPEEDDEFAULT).getText());
    boardSpeedValue.setWildcard(boardSpeedValueBuffer);
    boardSpeedValue.resizeToCurrentText();
    boardSpeedValue.setTypedText(touchgfx::TypedText(T_BOARDSPEED));
    add(boardSpeedValue);

    boardSpeedText.setXY(96, 78);
    boardSpeedText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    boardSpeedText.setLinespacing(0);
    boardSpeedText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GT9Q));
    add(boardSpeedText);

    ballSpeedDecrease.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_REMOVE_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_REMOVE_50_50_E8F6FB_SVG_ID));
    ballSpeedDecrease.setIconXY(0, 0);
    ballSpeedDecrease.setAction(flexButtonCallback);
    ballSpeedDecrease.setPosition(72, 24, 50, 50);
    add(ballSpeedDecrease);

    ballSpeedIncrease.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_ADD_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_ADD_50_50_E8F6FB_SVG_ID));
    ballSpeedIncrease.setIconXY(0, 0);
    ballSpeedIncrease.setAction(flexButtonCallback);
    ballSpeedIncrease.setPosition(198, 24, 50, 50);
    add(ballSpeedIncrease);

    ballSpeedValue.setXY(148, 24);
    ballSpeedValue.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ballSpeedValue.setLinespacing(0);
    Unicode::snprintf(ballSpeedValueBuffer, BALLSPEEDVALUE_SIZE, "%s", touchgfx::TypedText(T_BALLSPEEDDEFAULT).getText());
    ballSpeedValue.setWildcard(ballSpeedValueBuffer);
    ballSpeedValue.resizeToCurrentText();
    ballSpeedValue.setTypedText(touchgfx::TypedText(T_BALLSPEED));
    add(ballSpeedValue);

    ballSpeedText.setXY(108, 0);
    ballSpeedText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ballSpeedText.setLinespacing(0);
    ballSpeedText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VHSL));
    add(ballSpeedText);
}

SettingsViewBase::~SettingsViewBase()
{

}

void SettingsViewBase::setupScreen()
{

}

void SettingsViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &ballSpeedIncrease)
    {
        //ballSpeedIncreaseHandle
        //When ballSpeedIncrease clicked call virtual function
        //Call ballSpeedIncreaseFunction
        ballSpeedIncreaseFunction();
    }
    if (&src == &ballSpeedDecrease)
    {
        //ballSpeedDecreaseHandle
        //When ballSpeedDecrease clicked call virtual function
        //Call ballSpeedDecreaseFunction
        ballSpeedDecreaseFunction();
    }
    if (&src == &boardSpeedIncrease)
    {
        //boardSpeedIncreaseHandle
        //When boardSpeedIncrease clicked call virtual function
        //Call boardSpeedIncreaseFunction
        boardSpeedIncreaseFunction();
    }
    if (&src == &boardSpeedDecrease)
    {
        //boardSpeedDecreaseHandle
        //When boardSpeedDecrease clicked call virtual function
        //Call boardSpeedDecreaseFunction
        boardSpeedDecreaseFunction();
    }
    if (&src == &scoreLimitIncrease)
    {
        //scoreLimitIncreaseHandle
        //When scoreLimitIncrease clicked call virtual function
        //Call scoreLimitIncreaseFunction
        scoreLimitIncreaseFunction();
    }
    if (&src == &scoreLimitDecrease)
    {
        //scoreLimitDecreaseHandle
        //When scoreLimitDecrease clicked call virtual function
        //Call scoreLimitDecreaseFunction
        scoreLimitDecreaseFunction();
    }
    if (&src == &backButton)
    {
        //backButtonHandle
        //When backButton clicked change screen to Start
        //Go to Start with no screen transition
        application().gotoStartScreenNoTransition();
    }
    if (&src == &playButton)
    {
        //playButtonHandle
        //When playButton clicked call virtual function
        //Call playButtonHandleFunction
        playButtonHandleFunction();
    
        //playGame
        //When playButtonHandle completed change screen to Game
        //Go to Game with no screen transition
        application().gotoGameScreenNoTransition();
    }
    if (&src == &resetButton)
    {
        //resetButtonHandle
        //When resetButton clicked call virtual function
        //Call resetButtonHandleFuction
        resetButtonHandleFuction();
    }
    if (&src == &saveButton)
    {
        //saveButtonHandle
        //When saveButton clicked call virtual function
        //Call saveButtonHandleFunction
        saveButtonHandleFunction();
    }
}
