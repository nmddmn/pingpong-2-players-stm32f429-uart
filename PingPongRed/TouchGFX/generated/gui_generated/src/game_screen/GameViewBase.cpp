/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/game_screen/GameViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

GameViewBase::GameViewBase() :
    flexButtonCallback(this, &GameViewBase::flexButtonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 320, 240);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    backGround.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BACKGROUNDS_1024X600_GRADIENT_LIGHT_ID));
    backGround.setPosition(0, 0, 320, 240);
    backGround.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(backGround);

    blueBox.setPosition(10, 95, 10, 50);
    blueBox.setColor(touchgfx::Color::getColorFromRGB(156, 213, 240));
    blueBox.setBorderColor(touchgfx::Color::getColorFromRGB(31, 122, 196));
    blueBox.setBorderSize(2);
    add(blueBox);

    redBox.setPosition(300, 95, 10, 50);
    redBox.setColor(touchgfx::Color::getColorFromRGB(250, 162, 162));
    redBox.setBorderColor(touchgfx::Color::getColorFromRGB(214, 36, 36));
    redBox.setBorderSize(2);
    add(redBox);

    ball.setPosition(150, 110, 20, 20);
    ball.setCenter(10, 10);
    ball.setRadius(10);
    ball.setLineWidth(0);
    ball.setArc(0, 360);
    ballPainter.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_SWIPECONTAINER_MEDIUM_ON_ACTIVE_ID));
    ball.setPainter(ballPainter);
    add(ball);

    pauseButton.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_AV_PAUSE_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_AV_PAUSE_50_50_E8F6FB_SVG_ID));
    pauseButton.setIconXY(0, 0);
    pauseButton.setVisible(false);
    pauseButton.setAction(flexButtonCallback);
    pauseButton.setPosition(135, 190, 50, 50);
    add(pauseButton);

    pauseModal.setShadeColor(touchgfx::Color::getColorFromRGB(34, 34, 34));
    add(pauseModal);

    blueText.setPosition(65, 20, 80, 25);
    blueText.setColor(touchgfx::Color::getColorFromRGB(31, 122, 196));
    blueText.setLinespacing(0);
    Unicode::snprintf(blueTextBuffer, BLUETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_J6XR).getText());
    blueText.setWildcard(blueTextBuffer);
    blueText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_66PK));
    add(blueText);

    redText.setPosition(175, 20, 80, 25);
    redText.setColor(touchgfx::Color::getColorFromRGB(214, 36, 36));
    redText.setLinespacing(0);
    Unicode::snprintf(redTextBuffer, REDTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_G5OC).getText());
    redText.setWildcard(redTextBuffer);
    redText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_87DP));
    add(redText);

    replayButton.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_AV_REPLAY_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_AV_REPLAY_50_50_E8F6FB_SVG_ID));
    replayButton.setIconXY(0, 0);
    replayButton.setAction(flexButtonCallback);
    replayButton.setPosition(185, 190, 50, 50);
    add(replayButton);

    backButton.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_E8F6FB_SVG_ID));
    backButton.setIconXY(0, 0);
    backButton.setAction(flexButtonCallback);
    backButton.setPosition(85, 190, 50, 50);
    add(backButton);

    playButton.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_AV_PLAY_ARROW_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_AV_PLAY_ARROW_50_50_E8F6FB_SVG_ID));
    playButton.setIconXY(0, 0);
    playButton.setAction(flexButtonCallback);
    playButton.setPosition(135, 190, 50, 50);
    add(playButton);

    timeBar.setXY(10, 0);
    timeBar.setProgressIndicatorPosition(0, 0, 300, 5);
    timeBar.setRange(0, 100);
    timeBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    timeBar.setBackground(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_IMAGEPROGRESS_PLAIN_THIN_MEDIUM_ID));
    timeBar.setBitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_IMAGEPROGRESS_PLAIN_THIN_MEDIUM_ACTIVE_ID);
    timeBar.setValue(60);
    timeBar.setAnchorAtZero(true);
    add(timeBar);

    timeClock.setPosition(135, 5, 50, 15);
    timeClock.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    timeClock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_918H));
    timeClock.displayLeadingZeroForHourIndicator(true);
    timeClock.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR);
    timeClock.setTime24Hour(0, 0, 0);
    add(timeClock);

    blueWin.setXY(58, 100);
    blueWin.setColor(touchgfx::Color::getColorFromRGB(31, 122, 196));
    blueWin.setLinespacing(0);
    blueWin.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VSN7));
    blueWin.setVisible(false);
    add(blueWin);

    redWin.setXY(68, 100);
    redWin.setColor(touchgfx::Color::getColorFromRGB(214, 36, 36));
    redWin.setLinespacing(0);
    redWin.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0EK2));
    redWin.setVisible(false);
    add(redWin);
}

GameViewBase::~GameViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void GameViewBase::setupScreen()
{

}

void GameViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &pauseButton)
    {
        //handlePauseButton
        //When pauseButton clicked hide pauseButton
        //Hide pauseButton
        pauseButton.setVisible(false);
        pauseButton.invalidate();
    
        //showPlayButton
        //When handlePauseButton completed show playButton
        //Show playButton
        playButton.setVisible(true);
        playButton.invalidate();
    
    
        //showBackButton
        //When handlePauseButton completed show backButton
        //Show backButton
        backButton.setVisible(true);
        backButton.invalidate();
    
    
        //showReplayButton
        //When handlePauseButton completed show replayButton
        //Show replayButton
        replayButton.setVisible(true);
        replayButton.invalidate();
    
    
        //showPauseModal
        //When handlePauseButton completed show pauseModal
        //Show pauseModal
        pauseModal.setVisible(true);
        pauseModal.invalidate();
    
    
        //handlePauseButtonFunction
        //When handlePauseButton completed call virtual function
        //Call handlePauseButton
        handlePauseButton();
    }
    if (&src == &playButton)
    {
        //handlePlayButton
        //When playButton clicked hide playButton
        //Hide playButton
        playButton.setVisible(false);
        playButton.invalidate();
    
        //showPauseButton
        //When handlePlayButton completed show pauseButton
        //Show pauseButton
        pauseButton.setVisible(true);
        pauseButton.invalidate();
    
    
        //hideBackButton
        //When handlePlayButton completed hide backButton
        //Hide backButton
        backButton.setVisible(false);
        backButton.invalidate();
    
    
        //hideReplayButton
        //When handlePlayButton completed hide replayButton
        //Hide replayButton
        replayButton.setVisible(false);
        replayButton.invalidate();
    
    
        //hidePauseModal
        //When handlePlayButton completed hide pauseModal
        //Hide pauseModal
        pauseModal.setVisible(false);
        pauseModal.invalidate();
    
    
        //handlePlayButtonFunction
        //When handlePlayButton completed call virtual function
        //Call handlePlayButton
        handlePlayButton();
    }
    if (&src == &backButton)
    {
        //backToStart
        //When backButton clicked change screen to Start
        //Go to Start with no screen transition
        application().gotoStartScreenNoTransition();
    }
    if (&src == &replayButton)
    {
        //handleReplayButton
        //When replayButton clicked hide replayButton
        //Hide replayButton
        replayButton.setVisible(false);
        replayButton.invalidate();
    
        //hidePauseModelReplay
        //When handleReplayButton completed hide pauseModal
        //Hide pauseModal
        pauseModal.setVisible(false);
        pauseModal.invalidate();
    
    
        //hideBackButtonReplay
        //When handleReplayButton completed hide backButton
        //Hide backButton
        backButton.setVisible(false);
        backButton.invalidate();
    
    
        //hidePlayButtonReplay
        //When handleReplayButton completed hide playButton
        //Hide playButton
        playButton.setVisible(false);
        playButton.invalidate();
    
    
        //showPauseButtonReplay
        //When handleReplayButton completed show pauseButton
        //Show pauseButton
        pauseButton.setVisible(true);
        pauseButton.invalidate();
    
    
        //handleReplayButtonFunction
        //When handleReplayButton completed call virtual function
        //Call handleReplayButton
        handleReplayButton();
    }
}

void GameViewBase::handleTickEvent()
{
    //tickEvent
    //When every N tick call virtual function
    //Call tickEvent
    tickEvent();
}
